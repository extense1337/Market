// <auto-generated />
using System;
using Market.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Market.Database.Migrations
{
    [DbContext(typeof(MarketDbContext))]
    [Migration("20230604180452_naming convention")]
    partial class namingconvention
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.2.23128.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Market.DomainEntities.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<byte>("PricingType")
                        .HasColumnType("smallint")
                        .HasColumnName("pricing_type");

                    b.Property<int>("SellerId")
                        .HasColumnType("integer")
                        .HasColumnName("seller_id");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("SellerId")
                        .HasDatabaseName("ix_products_seller_id");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("Market.DomainEntities.Entities.ProductPicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("content");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("upload_date");

                    b.HasKey("Id")
                        .HasName("pk_product_picture");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_product_picture_product_id");

                    b.ToTable("product_picture", (string)null);
                });

            modelBuilder.Entity("Market.DomainEntities.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Market.DomainEntities.Entities.Product", b =>
                {
                    b.HasOne("Market.DomainEntities.Entities.User", "Seller")
                        .WithMany("SellingProducts")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_products_users_seller_id");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("Market.DomainEntities.Entities.ProductPicture", b =>
                {
                    b.HasOne("Market.DomainEntities.Entities.Product", "Product")
                        .WithMany("Pictures")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_picture_products_product_id");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Market.DomainEntities.Entities.Product", b =>
                {
                    b.Navigation("Pictures");
                });

            modelBuilder.Entity("Market.DomainEntities.Entities.User", b =>
                {
                    b.Navigation("SellingProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
